from aiogram import Router, F
from aiogram.types import CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext

from bot.handlers.states import GradeStudent
from bot.keyboards.grade_input import get_cancel_keyboard
from bot.keyboards.main_menu import get_main_menu
from bot.keyboards.history import get_history_keyboard
from bot.database.database import get_student_grades, get_or_create_student
from bot.handlers.states import ViewHistory
from bot.fuzzy_logic_adapter import get_visualization, evaluate_student

router = Router()

@router.callback_query(F.data.startswith("menu:"))
async def handle_menu_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ inline-–º–µ–Ω—é"""
    action = callback.data.split(":")[1]
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.answer()
    
    if action == "grade":
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å:",
            reply_markup=get_cancel_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
        await state.set_state(GradeStudent.waiting_for_name)
        
    elif action == "visualize":
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        await callback.message.answer("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            visualization_buffer = await get_visualization()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BytesIO –≤ BufferedInputFile
            visualization_file = BufferedInputFile(
                visualization_buffer.getvalue(),
                filename="visualization.png"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await callback.message.answer_photo(
                visualization_file,
                caption="üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∑–Ω–∞–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
            )
        except Exception as e:
            await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
        
    elif action == "history":
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        student = await get_or_create_student(
            telegram_id=callback.from_user.id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ü–µ–Ω–æ–∫
        grades = await get_student_grades(student.id)
        
        if not grades:
            await callback.message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ü–µ–Ω–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /grade, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –æ—Ü–µ–Ω–æ–∫
        history_text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫</b>\n\n"
        
        for i, grade in enumerate(grades, 1):
            history_text += (
                f"<b>{i}. –î–∞—Ç–∞:</b> {grade.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: {grade.quality}/10\n"
                f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {grade.accuracy}/10\n"
                f"‚Ä¢ –°—Ä–æ–∫–∏: {grade.deadline}/10\n"
                f"‚Ä¢ –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {grade.numeric_grade:.2f}/10 ({grade.text_grade})\n\n"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.answer(
            history_text,
            parse_mode="HTML",
            reply_markup=get_history_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
        await state.set_state(ViewHistory.viewing)
        
    elif action == "tests":
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await callback.message.answer("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = [
            {"name": "–¢–µ—Å—Ç 1", "quality": 9, "accuracy": 9, "deadline": 10, "expected": "–æ—Ç–ª–∏—á–Ω–∏–∫"},
            {"name": "–¢–µ—Å—Ç 2", "quality": 6, "accuracy": 6, "deadline": 6, "expected": "—Ö–æ—Ä–æ—à–∏—Å—Ç"},
            {"name": "–¢–µ—Å—Ç 3", "quality": 3, "accuracy": 3, "deadline": 2, "expected": "—Ç—Ä–æ–µ—á–Ω–∏–∫"},
            {"name": "–¢–µ—Å—Ç 4", "quality": 5, "accuracy": 4, "deadline": 8, "expected": "—Ö–æ—Ä–æ—à–∏—Å—Ç"},
            {"name": "–¢–µ—Å—Ç 5", "quality": 1, "accuracy": 2, "deadline": 1, "expected": "—Ç—Ä–æ–µ—á–Ω–∏–∫"}
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
        results_text = "üß™ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        
        for test in test_data:
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∑–Ω–∞–Ω–∏—è
            numeric_grade, text_grade = await evaluate_student(
                test["quality"], 
                test["accuracy"], 
                test["deadline"],
                f"Test Student {test['name']}"
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞
            test_result = "‚úÖ –ü–†–û–ô–î–ï–ù" if text_grade.lower() == test["expected"].lower() else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–±—â–∏–π —Ç–µ–∫—Å—Ç
            results_text += (
                f"<b>{test['name']}:</b>\n"
                f"‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –∫–∞—á–µ—Å—Ç–≤–æ={test['quality']}, "
                f"—Ç–æ—á–Ω–æ—Å—Ç—å={test['accuracy']}, "
                f"—Å—Ä–æ–∫–∏={test['deadline']}\n"
                f"‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {test['expected']}\n"
                f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {text_grade} ({numeric_grade:.2f})\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞: {test_result}\n\n"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        await callback.message.answer(results_text, parse_mode="HTML")
        
    elif action == "help":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
        help_text = (
            "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/grade - –û—Ü–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞\n"
            "/visualize - –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏\n"
            "/history - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ü–µ–Ω–æ–∫\n"
            "/tests - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "<b>–ö–∞–∫ –æ—Ü–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞:</b>\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ 'üß† –û—Ü–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞' –≤ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /grade\n"
            "2. –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞\n"
            "3. –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã (0-10)\n"
            "4. –û—Ü–µ–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (0-10)\n"
            "5. –û—Ü–µ–Ω–∏—Ç–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ (0-10)\n"
            "6. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏\n\n"
            "<b>–ù–µ—á–µ—Ç–∫–∞—è –ª–æ–≥–∏–∫–∞:</b>\n"
            "–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ—á–µ—Ç–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ –ú–∞–º–¥–∞–Ω–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."
        )
        
        await callback.message.answer(help_text, parse_mode="HTML") 