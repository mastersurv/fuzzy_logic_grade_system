from aiogram import Router, F
from aiogram.types import CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from bot.handlers.states import GradeStudent
from bot.keyboards.grade_input import get_rating_keyboard
from bot.fuzzy_logic_adapter import evaluate_student, get_result_visualization

router = Router()

@router.callback_query(F.data.startswith("quality:"))
async def process_quality_rating(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    await callback.answer()
    quality = int(callback.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(quality=quality)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ —Ç–æ—á–Ω–æ—Å—Ç–∏
    await callback.message.edit_text(
        f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {quality}/10\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–æ—Ç 0 –¥–æ 10):",
        reply_markup=get_rating_keyboard("accuracy")
    )
    await state.set_state(GradeStudent.waiting_for_accuracy)

@router.callback_query(StateFilter(GradeStudent.waiting_for_accuracy), F.data.startswith("accuracy:"))
async def process_accuracy_rating(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    await callback.answer()
    accuracy = int(callback.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(accuracy=accuracy)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
    data = await state.get_data()
    quality = data.get("quality")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ —Å—Ä–æ–∫–æ–≤
    await callback.message.edit_text(
        f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {quality}/10\n"
        f"‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {accuracy}/10\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏—Ç–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ (–æ—Ç 0 –¥–æ 10):",
        reply_markup=get_rating_keyboard("deadline")
    )
    await state.set_state(GradeStudent.waiting_for_deadline)

@router.callback_query(StateFilter(GradeStudent.waiting_for_deadline), F.data.startswith("deadline:"))
async def process_deadline_rating(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Å—Ä–æ–∫–æ–≤"""
    await callback.answer()
    deadline = int(callback.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(deadline=deadline)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
    data = await state.get_data()
    quality = data.get("quality")
    accuracy = data.get("accuracy")
    student_name = data.get("student_name", "Unnamed")
    
    # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegram_id = callback.from_user.id
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
    numeric_grade, text_grade = await evaluate_student(
        quality, 
        accuracy, 
        deadline, 
        student_name,
        telegram_id
    )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = (
        f"üéì <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ '{student_name}'</b>\n\n"
        f"üìä <b>–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {quality}/10\n"
        f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {accuracy}/10\n"
        f"‚Ä¢ –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤: {deadline}/10\n\n"
        f"üìà <b>–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:</b> {numeric_grade:.2f}/10\n"
        f"üìù <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {text_grade.upper()}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callback.message.edit_text(
        result_text,
        parse_mode="HTML"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        visualization_buffer = await get_result_visualization(quality, accuracy, deadline)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BytesIO –≤ BufferedInputFile
        visualization_file = BufferedInputFile(
            visualization_buffer.getvalue(),
            filename="result_visualization.png"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
        await callback.message.answer_photo(
            visualization_file,
            caption="üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ü–µ–Ω–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ—á–µ—Ç–∫–æ–π –ª–æ–≥–∏–∫–∏"
        )
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ü–µ–Ω–∫–∏
    await state.clear()

@router.callback_query(F.data == "cancel_input")
async def cancel_input(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    await callback.answer("–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")
    await callback.message.edit_text("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ü–µ–Ω–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.")
    await state.clear() 