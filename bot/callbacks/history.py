import io
import json
import csv
from aiogram import Router, F
from aiogram.types import CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext

from bot.database.database import get_student_grades, get_or_create_student

router = Router()

@router.callback_query(F.data == "export_csv")
async def export_csv(callback: CallbackQuery, state: FSMContext):
    """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ CSV —Ñ–∞–π–ª"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await get_or_create_student(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ü–µ–Ω–æ–∫
    grades = await get_student_grades(student.id)
    
    if not grades:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è CSV
    buffer = io.StringIO()
    writer = csv.writer(buffer)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    writer.writerow([
        "–î–∞—Ç–∞", "–ö–∞—á–µ—Å—Ç–≤–æ", "–¢–æ—á–Ω–æ—Å—Ç—å", "–°—Ä–æ–∫–∏", 
        "–ß–∏—Å–ª–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞", "–¢–µ–∫—Å—Ç–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞"
    ])
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    for grade in grades:
        writer.writerow([
            grade.created_at.strftime('%Y-%m-%d %H:%M:%S'),
            grade.quality,
            grade.accuracy,
            grade.deadline,
            grade.numeric_grade,
            grade.text_grade
        ])
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
    csv_bytes = buffer.getvalue().encode('utf-8')
    file = BufferedInputFile(csv_bytes, filename="grades_history.csv")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await callback.message.answer_document(
        file,
        caption="üìä –ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"
    )

@router.callback_query(F.data == "export_json")
async def export_json(callback: CallbackQuery, state: FSMContext):
    """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ JSON —Ñ–∞–π–ª"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await get_or_create_student(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ü–µ–Ω–æ–∫
    grades = await get_student_grades(student.id)
    
    if not grades:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    data = []
    for grade in grades:
        data.append({
            "–¥–∞—Ç–∞": grade.created_at.strftime('%Y-%m-%d %H:%M:%S'),
            "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã": {
                "–∫–∞—á–µ—Å—Ç–≤–æ": grade.quality,
                "—Ç–æ—á–Ω–æ—Å—Ç—å": grade.accuracy,
                "—Å—Ä–æ–∫–∏": grade.deadline
            },
            "–æ—Ü–µ–Ω–∫–∞": {
                "—á–∏—Å–ª–æ–≤–∞—è": grade.numeric_grade,
                "—Ç–µ–∫—Å—Ç–æ–≤–∞—è": grade.text_grade
            }
        })
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON
    json_str = json.dumps(data, ensure_ascii=False, indent=4)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
    file = BufferedInputFile(json_str.encode('utf-8'), filename="grades_history.json")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await callback.message.answer_document(
        file,
        caption="üìä –ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"
    )

@router.callback_query(F.data == "refresh_history")
async def refresh_history(callback: CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ü–µ–Ω–æ–∫"""
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await get_or_create_student(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –æ—Ü–µ–Ω–æ–∫
    grades = await get_student_grades(student.id)
    
    if not grades:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ü–µ–Ω–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /grade, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –æ—Ü–µ–Ω–æ–∫
    history_text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫</b>\n\n"
    
    for i, grade in enumerate(grades, 1):
        history_text += (
            f"<b>{i}. –î–∞—Ç–∞:</b> {grade.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: {grade.quality}/10\n"
            f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {grade.accuracy}/10\n"
            f"‚Ä¢ –°—Ä–æ–∫–∏: {grade.deadline}/10\n"
            f"‚Ä¢ –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {grade.numeric_grade:.2f}/10 ({grade.text_grade})\n\n"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    from bot.keyboards.history import get_history_keyboard
    await callback.message.edit_text(
        history_text,
        parse_mode="HTML",
        reply_markup=get_history_keyboard()
    )

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from bot.keyboards.main_menu import get_main_menu
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete() 