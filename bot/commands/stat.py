from aiogram import Router, types
from aiogram.filters import Command
from sqlalchemy import select, func

from bot.database.database import async_session
from bot.database.models import Student, GradeResult
from bot.config import ADMIN_IDS

router = Router()

@router.message(Command("stat"))
async def cmd_stat(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stat - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    async with async_session() as session:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users_query = select(func.count()).select_from(Student)
        total_users = await session.scalar(total_users_query)
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫
        total_grades_query = select(func.count()).select_from(GradeResult)
        total_grades = await session.scalar(total_grades_query)
        
        # –°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        avg_quality_query = select(func.avg(GradeResult.quality)).select_from(GradeResult)
        avg_quality = await session.scalar(avg_quality_query) or 0
        
        avg_accuracy_query = select(func.avg(GradeResult.accuracy)).select_from(GradeResult)
        avg_accuracy = await session.scalar(avg_accuracy_query) or 0
        
        avg_deadline_query = select(func.avg(GradeResult.deadline)).select_from(GradeResult)
        avg_deadline = await session.scalar(avg_deadline_query) or 0
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_stats_query = select(
            GradeResult.text_grade,
            func.count().label('count')
        ).group_by(GradeResult.text_grade)
        
        category_stats_result = await session.execute(category_stats_query)
        category_stats = {row[0]: row[1] for row in category_stats_result}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        poor_count = category_stats.get('–¢—Ä–æ–µ—á–Ω–∏–∫', 0)
        good_count = category_stats.get('–•–æ—Ä–æ—à–∏—Å—Ç', 0)
        excellent_count = category_stats.get('–û—Ç–ª–∏—á–Ω–∏–∫', 0)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    percent_poor = 0
    percent_good = 0
    percent_excellent = 0
    
    if total_grades > 0:
        percent_poor = 100 * poor_count / total_grades
        percent_good = 100 * good_count / total_grades
        percent_excellent = 100 * excellent_count / total_grades
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    stat_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞</b>\n\n"
        f"üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
        f"üìù <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫:</b> {total_grades}\n\n"
        f"üìà <b>–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: {avg_quality:.2f}/10\n"
        f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {avg_accuracy:.2f}/10\n"
        f"‚Ä¢ –°—Ä–æ–∫–∏: {avg_deadline:.2f}/10\n\n"
        f"üèÜ <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        f"‚Ä¢ üü† –¢—Ä–æ–µ—á–Ω–∏–∫–∏: {poor_count} ({percent_poor:.1f}% –æ—Ç –≤—Å–µ—Ö –æ—Ü–µ–Ω–æ–∫)\n"
        f"‚Ä¢ üü° –•–æ—Ä–æ—à–∏—Å—Ç—ã: {good_count} ({percent_good:.1f}% –æ—Ç –≤—Å–µ—Ö –æ—Ü–µ–Ω–æ–∫)\n"
        f"‚Ä¢ üü¢ –û—Ç–ª–∏—á–Ω–∏–∫–∏: {excellent_count} ({percent_excellent:.1f}% –æ—Ç –≤—Å–µ—Ö –æ—Ü–µ–Ω–æ–∫)"
    )
    
    await message.answer(stat_text, parse_mode="HTML") 