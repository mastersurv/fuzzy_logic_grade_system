from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.fuzzy_logic_adapter import evaluate_student

router = Router()

@router.message(Command("tests"))
@router.message(F.text == "üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã")
async def cmd_tests(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tests –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    """
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await message.answer("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = [
        {"name": "–¢–µ—Å—Ç 1", "quality": 9, "accuracy": 9, "deadline": 10, "expected": "–æ—Ç–ª–∏—á–Ω–∏–∫"},
        {"name": "–¢–µ—Å—Ç 2", "quality": 6, "accuracy": 6, "deadline": 6, "expected": "—Ö–æ—Ä–æ—à–∏—Å—Ç"},
        {"name": "–¢–µ—Å—Ç 3", "quality": 3, "accuracy": 3, "deadline": 2, "expected": "—Ç—Ä–æ–µ—á–Ω–∏–∫"},
        {"name": "–¢–µ—Å—Ç 4", "quality": 5, "accuracy": 4, "deadline": 8, "expected": "—Ö–æ—Ä–æ—à–∏—Å—Ç"},
        {"name": "–¢–µ—Å—Ç 5", "quality": 1, "accuracy": 2, "deadline": 1, "expected": "—Ç—Ä–æ–µ—á–Ω–∏–∫"}
    ]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    results_text = "üß™ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
    
    for test in test_data:
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∑–Ω–∞–Ω–∏—è
        numeric_grade, text_grade = await evaluate_student(
            test["quality"], 
            test["accuracy"], 
            test["deadline"],
            f"Test Student {test['name']}"
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞
        test_result = "‚úÖ –ü–†–û–ô–î–ï–ù" if text_grade == test["expected"] else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–±—â–∏–π —Ç–µ–∫—Å—Ç
        results_text += (
            f"<b>{test['name']}:</b>\n"
            f"‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –∫–∞—á–µ—Å—Ç–≤–æ={test['quality']}, "
            f"—Ç–æ—á–Ω–æ—Å—Ç—å={test['accuracy']}, "
            f"—Å—Ä–æ–∫–∏={test['deadline']}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {test['expected']}\n"
            f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {text_grade} ({numeric_grade:.2f})\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞: {test_result}\n\n"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    await message.answer(results_text, parse_mode="HTML") 